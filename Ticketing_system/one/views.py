from django.shortcuts import render, redirect, HttpResponse, get_object_or_404
from .forms import *
from django.contrib.auth.decorators import login_required
from .models import *
import random
from django.contrib import messages
from django.utils import timezone


def index(request):
    return render(request, 'one/index.html')


def advising_view(request):
    if request.method == 'POST':
        form = StudentAdvisingForm(request.POST)
        if form.is_valid():
            advising_ticket = form.save(commit=False)

            # Set the service field with a valid service
            advising_ticket.service = form.cleaned_data['services']
            managers = advising_ticket.service.manager_set.all()
            if managers.exists():
                advising_ticket.manager = managers.first()

            advising_ticket.ticket_id = random.randint(1, 100000000)
            advising_ticket.save()
            
            notification_id = random.randint(1, 100000000)
            notification_content = f"A new ticket has been generated by student {advising_ticket.student_id.StudentID}"
            timestamp = timezone.now()
            status = "unread"

            notification = Notification.objects.create(
                NotificationID=notification_id,
                Manager=advising_ticket.manager,
                Timestamp=timestamp,
                NotificationContent=notification_content,
                Status=status,
            )

            request.session['notification_id'] = notification_id

            return HttpResponse('success_page')
    else:
        form = StudentAdvisingForm()

    return render(request, 'one/advising_form.html', {'form': form})


def quick_help(request):
    student_id_search = request.GET.get('student_id')

    if student_id_search:
        student_advisings = StudentAdvising.objects.filter(
            student_id__StudentID=student_id_search)
    else:
        student_advisings = StudentAdvising.objects.all()

    return render(request, 'one/quick_help.html', {'student_advisings': student_advisings, 'student_id_search': student_id_search})


def ticket_details(request, ticket_id):
    advising_ticket = get_object_or_404(StudentAdvising, ticket_id=ticket_id)
    return render(request, 'one/ticket_details.html', {'advising_ticket': advising_ticket})


# @login_required
def manager_dashboard(request):
    # Check if the logged-in user is a manager
    # user = request.user
    # if not Manager.objects.filter(Email=user.email).exists():
    #     return render(request, 'access_denied.html')  # Create an access denied template

    return render(request, 'one/manager_dashboard.html')

# @login_required


def add_subject_view(request):
    # user = request.user
    # if not Manager.objects.filter(Email=user.email).exists():
    #     return render(request, 'access_denied.html')

    if request.method == 'POST':
        form = AddSubjectForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Subject added successfully!')
            return redirect('manager_dashboard')
        else:
            messages.error(request, 'Please correct the errors below.')
    else:
        form = AddSubjectForm()

    return render(request, 'one/add_subject.html', {'form': form})


def add_faculty_view(request):
    # user = request.user
    # if not Manager.objects.filter(Email=user.email).exists():
    #     return render(request, 'access_denied.html')

    if request.method == 'POST':
        form = FacultyForm(request.POST)
        if form.is_valid():

            last_faculty = Faculty.objects.all().order_by('FacultyID').last()
            if last_faculty:
                last_id = int(last_faculty.FacultyID[1:])
                new_id = f'E{last_id + 1:03}'
            else:
                new_id = 'E001'

            form.instance.FacultyID = new_id
            form.save()

            return redirect('manager_dashboard')
        else:
            messages.error(request, 'Please correct the errors below.')
    else:
        form = FacultyForm()

    return render(request, 'one/add_faculty.html', {'form': form})


def add_section_view(request):
    # user = request.user
    # if not Manager.objects.filter(Email=user.email).exists():
    #     return render(request, 'access_denied.html')

    if request.method == 'POST':
        form = SectionForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('manager_dashboard')
        else:
            messages.error(request, 'Please correct the errors below.')
    else:
        form = SectionForm()

    return render(request, 'one/add_section.html', {'form': form})


def add_student_view(request):
    # user = request.user
    # if not Manager.objects.filter(Email=user.email).exists():
    #     return render(request, 'access_denied.html')

    if request.method == 'POST':
        form = StudentForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('manager_dashboard')
        else:
            messages.error(request, 'Please correct the errors below.')
    else:
        form = StudentForm()

    return render(request, 'one/add_student.html', {'form': form})
